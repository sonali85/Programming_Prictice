A computer program is a collection of instructions. A process is the execution of those instructions.
A thread is a subset of the process. A process can have one or more threads.
process is an instance of a computer program that is being executed. Any process has 3 basic components:
An executable program.
The associated data needed by the program (variables, work space, buffers, etc.)
The execution context of the program (State of process)

A thread is an entity within a process that can be scheduled for execution. Also, it is the smallest unit of processing 
that can be performed in an OS (Operating System). In simple words, a thread is a sequence of such instructions within a program 
that can be executed independently of other code. For simplicity, you can assume that a thread is simply a subset of a process!

A thread contains all this information in a Thread Control Block (TCB):

Thread Identifier: Unique id (TID) is assigned to every new thread
Stack pointer: Points to thread’s stack in the process. Stack contains the local variables under thread’s scope.
Program counter: a register which stores the address of the instruction currently being executed by thread.
Thread state: can be running, ready, waiting, start or done.
Thread’s register set: registers assigned to thread for computations.
Parent process Pointer: A pointer to the Process control block (PCB) of the process that the thread lives on

Multithreading is defined as the ability of a processor to execute multiple threads concurrently.

import threading   
def print_cube(num): 
    """ 
    function to print cube of given num 
    """
    print("Cube: {}".format(num * num * num)) 
  
def print_square(num): 
    """ 
    function to print square of given num 
    """
    print("Square: {}".format(num * num)) 
  
if __name__ == "__main__": 
    # creating thread 
    t1 = threading.Thread(target=print_square, args=(10,)) 
    t2 = threading.Thread(target=print_cube, args=(10,)) 
    # starting thread 1 
    t1.start() 
    # starting thread 2 
    t2.start() 
    # wait until thread 1 is completely executed 
    t1.join() 
    # wait until thread 2 is completely executed 
    t2.join() 


t.is_alive()
t.join() 
print("Number of active threads: "+ str(threading.active_count())) 
        print("Name of current thread: " + str(threading.current_thread().getName()))




Synchronization between threads
Thread synchronization is defined as a mechanism which ensures that two or more concurrent threads do not simultaneously execute some particular program segment known as critical section.
Critical section refers to the parts of the program where the shared resource is accessed.
Concurrent accesses to shared resource can lead to race condition.
A race condition occurs when two or more threads can access shared data and they try to change it at the same time. As a result, the values of 
variables may be unpredictable and vary depending on the timings of context switches of the processes.

threading module provides a Lock class to deal with the race conditions. Lock is implemented using a Semaphore object provided by the Operating System.
A semaphore is a synchronization object that controls access by multiple processes/threads to a common resource in a parallel programming environment. 
It is simply a value in a designated place in operating system (or kernel) storage that each process/thread can check and then change. Depending on the value 
that is found, the process/thread can use the resource or will find that it is already in use and must wait for some period before trying again. 
Semaphores can be binary (0 or 1) or can have additional values. Typically, a process/thread using semaphores checks the value and then, 
if it using the resource, changes the value to reflect this so that subsequent semaphore users will know to wait.


lock = threading.Lock() 
lock.acquire() 
increment()  // function name
lock.release() 

Advantages:

It doesn’t block the user. This is because threads are independent of each other.
Better use of system resources is possible since threads execute tasks parallely.
Enhanced performance on multi-processor machines.
Multi-threaded servers and interactive GUIs use multithreading exclusively.

Disadvantages:

As number of threads increase, complexity increases.
Synchronization of shared resources (objects, data) is necessary.
It is difficult to debug, result is sometimes unpredictable.
Potential deadlocks which leads to starvation, i.e. some threads may not be served with a bad design
Constructing and synchronizing threads is CPU/memory intensive.


Explain the differences between multithreading and multiprocessing?
Answer:
In the case of multithreading, the application processes and threads use to share the single or multiple core resources that include CPU caches, 
translation lookaside buffer and the computing units. But in the case of multiprocessing, the application implements multiple complete processing
 units in one or more cores. This is the basic difference between multithreading and multiprocessing since the main aim of multithreading is to implement 
more single core utilization with the help of thread level and instruction level parallelism.


Explain different methods for threads?
Answer:
Below are the few important methods for threads:
Start(): This method is used to start the thread execution process. This is the basic method that should be used to start any multithreading processes.
getName(): It is used to get the name of a thread
setpoint(Int new priority): This method is used to change the priorities of the thread
yield(): This method is used to pause the execution of the current thread while the other thread will carry on the normal execution phase.
run() - The run() method is the entry point for a thread.

start() - The start() method starts a thread by calling the run method.

join([time]) - The join() waits for threads to terminate.

isAlive() - The isAlive() method checks whether a thread is still executing.

getName() - The getName() method returns the name of a thread.

setName() - The setName() method sets the name of a thread.



8. What do you mean by lightweight process?
Answer:
This is the advanced Multithreading Interview Questions asked in an interview.The thread is also known as a lightweight process. 
It is basically a flow of information and its execution across the process code with respect to its own integrated programs. It improves the performance by using parallelism.

9. What do you mean by Livelock?
Answer:
When all the threads are in blocked state and execution is stopped due to resource unavailability then that situation is termed as livelock


import threading 
  
def print_hello_three_times():
  for i in range(3):
    print("Hello")
  
def print_hi_three_times(): 
    for i in range(3): 
      print("Hi") 

t1 = threading.Thread(target=print_hello_three_times)  
t2 = threading.Thread(target=print_hi_three_times)  

t1.start()
t2.start()
When you run the program, the output will be something like:


Hello
Hello
Hi
Hello
Hi
Hi


Note that, t1 and t2 run concurrently and you might get different output.



