Polygon.__init__(self,3)

class Triangle(Polygon):
    def __init__(self):
        Polygon.__init__(self,3)

In the above example, notice that __init__() method was defined in both classes, Triangle as well Polygon. 
When this happens, the method in the derived class overrides that in the base class. This is to say, __init__() in 
Triangle gets preference over the __init__ in Polygon.
Generally when overriding a base method, we tend to extend the definition rather than simply replace it. 
The same is being done by calling the method in base class from the one in derived class (calling Polygon.__init__() from __init__() in 
Triangle).
the function isinstance() returns True if the object is an instance of the class or other classes derived from it. Each and every
class in Python inherits from the base class object.

In the multiple inheritance scenario, any specified attribute is searched first in the current class. If not found, the search 
continues into parent classes in depth-first, left-right fashion without searching the same class twice.
So, in the above example of MultiDerived class the search order is [MultiDerived, Base1, Base2, object]. This order is also 
called linearization of MultiDerived class and the set of rules used to find this order is called Method Resolution Order (MRO).
